<?xml version="1.0" encoding="UTF-8"?>

<project name="UmberFirm UFSOA App" basedir="." default="full-build">

    <property file="${project.basedir}/build.properties" override="true"/>

    <property name="build.version.latest" value="latest.dev" override="true"/>
    <property name="dockerrun.build.version" value="${build.version.latest}" override="true"/>
    <property name="basedir" value="${project.basedir}" />
    <property name="pdepend" value="${basedir}/vendor/bin/pdepend"/>
    <property name="phpcpd"  value="${basedir}/vendor/bin/phpcpd"/>
    <property name="phpcs"   value="${basedir}/vendor/bin/phpcs"/>
    <property name="phpdox"  value="${basedir}/vendor/bin/phpdox"/>
    <property name="phploc"  value="${basedir}/vendor/bin/phploc"/>
    <property name="phpmd"   value="${basedir}/vendor/bin/phpmd"/>
    <property name="phpunit" value="${basedir}/vendor/bin/phpunit"/>

    <target name="full-build"
            depends="prepare,static-analysis,phpunit,phpdox,-check-failure"
            description="Performs static analysis, runs the tests, and generates project documentation"/>

    <target name="full-build-parallel"
            depends="prepare,static-analysis-parallel,phpunit,phpdox,-check-failure"
            description="Performs static analysis (executing the tools in parallel), runs the tests, and generates project documentation"/>

    <target name="quick-build"
            depends="prepare,lint,static-analysis,phpunit-no-coverage,-check-failure"
            description="Performs a lint check and runs the tests (without generating code coverage reports)"/>

    <target name="static-analysis"
            depends="lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci"
            description="Performs static analysis" />

    <target name="project.configure" description="Expand project properties. Generate parameters.yml">
        <copy file="${project.basedir}/app/config/parameters.yml.dist" tofile="${project.basedir}/app/config/parameters.yml" overwrite="true">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
    </target>

    <target name="dockerrun.configure" description="Expand project properties. Generate Dockerrun.aws.json">
        <copy file="${project.basedir}/Dockerrun.aws.json.dist" tofile="${project.basedir}/Dockerrun.aws.json" overwrite="true">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
    </target>

    <target name="docker.build">
        <exec command="sudo docker build --no-cache -t umberfirm/ufsoa-app:${dockerrun.build.version} -t umberfirm/ufsoa-app:${build.version.latest} ." logoutput="true" level="debug" passthru="true" />
    </target>

    <target name="docker.push" depends="docker.build">
        <exec command="sudo docker push umberfirm/ufsoa-app:${dockerrun.build.version}" logoutput="true" level="debug" passthru="true" />
    </target>

    <target name="docker.push.latest" depends="docker.build">
        <exec command="sudo docker push umberfirm/ufsoa-app:${build.version.latest}" logoutput="true" level="debug" passthru="true" />
    </target>

    <target name="docker.rmi">
        <exec command="sudo docker rmi $(sudo docker images | grep ufsoa-app | gawk '{print $3}') -f" logoutput="true" level="debug" passthru="true" />
    </target>

    <target name="docker" depends="dockerrun.configure,docker.build,docker.push,docker.push.latest,docker.rmi" />

    <!-- Adjust the threadCount attribute's value to the number of CPUs -->
    <target name="static-analysis-parallel"
            description="Performs static analysis (executing the tools in parallel)">
        <parallel threadCount="2">
            <sequential>
                <phingcall target="pdepend"/>
                <phingcall target="phpmd-ci"/>
            </sequential>
            <phingcall target="lint"/>
            <phingcall target="phpcpd-ci"/>
            <phingcall target="phpcs-ci"/>
            <phingcall target="phploc-ci"/>
        </parallel>
    </target>

    <target name="clean"
            unless="clean.done"
            description="Cleanup build artifacts">
        <delete dir="${basedir}/build/api"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
        <delete dir="${basedir}/build/phpdox"/>
        <property name="clean.done" value="true"/>
    </target>

    <target name="prepare"
            unless="prepare.done"
            depends="clean"
            description="Prepare for build">
        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <mkdir dir="${basedir}/build/phpdox"/>
        <property name="prepare.done" value="true"/>
    </target>

    <target name="lint"
            unless="lint.done"
            description="Perform syntax check of sourcecode files">
        <apply executable="php" taskname="lint">
            <arg value="-l" />

            <fileset dir="${basedir}/src">
                <include name="**/*.php" />
                <!--<modified />-->
            </fileset>

            <!--<fileset dir="${basedir}/tests">-->
                <!--<include name="**/*.php" />-->
                <!--<modified />-->
            <!--</fileset>-->
        </apply>

        <property name="lint.done" value="true"/>
    </target>

    <target name="phploc"
            unless="phploc.done"
            description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
        <exec executable="${phploc}" taskname="phploc" logoutput="true" level="debug" passthru="true">
            <arg value="--count-tests" />
            <arg path="${basedir}/src" />
            <!--<arg path="${basedir}/tests" />-->
        </exec>

        <property name="phploc.done" value="true"/>
    </target>

    <target name="phploc-ci"
            unless="phploc.done"
            depends="prepare"
            description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phploc}" taskname="phploc" logoutput="true" level="debug" passthru="true">
            <arg value="--count-tests" />
            <arg value="--log-csv" />
            <arg path="${basedir}/build/logs/phploc.csv" />
            <arg value="--log-xml" />
            <arg path="${basedir}/build/logs/phploc.xml" />
            <arg path="${basedir}/src" />
            <!--<arg path="${basedir}/tests" />-->
        </exec>

        <property name="phploc.done" value="true"/>
    </target>

    <target name="pdepend"
            unless="pdepend.done"
            depends="prepare"
            description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${pdepend}" taskname="pdepend" logoutput="true" level="debug" passthru="true">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
            <arg path="${basedir}/src" />
        </exec>

        <property name="pdepend.done" value="true"/>
    </target>

    <target name="phpmd"
            unless="phpmd.done"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpmd}" taskname="phpmd" logoutput="true" level="debug" passthru="true">
            <arg path="${basedir}/src" />
            <arg value="text" />
            <arg path="${basedir}/build/phpmd.xml" />
        </exec>

        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpmd-ci"
            unless="phpmd.done"
            depends="prepare"
            description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpmd}" taskname="phpmd" logoutput="true" level="debug" passthru="true">
            <arg path="${basedir}/src" />
            <arg value="xml" />
            <arg path="${basedir}/build/phpmd.xml" />
            <arg value="--reportfile" />
            <arg path="${basedir}/build/logs/pmd.xml" />
        </exec>

        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpcs"
            unless="phpcs.done"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcs}" taskname="phpcs" logoutput="true" level="debug" passthru="true">
            <arg value="--standard=PSR2" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${basedir}/src" />
            <!--<arg path="${basedir}/tests" />-->
        </exec>

        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcs-ci"
            unless="phpcs.done"
            depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcs}" output="/dev/null" taskname="phpcs" logoutput="true" level="debug" passthru="true">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
            <arg value="--standard=PSR2" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${basedir}/src" />
            <!--<arg path="${basedir}/tests" />-->
        </exec>

        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcpd"
            unless="phpcpd.done"
            description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcpd}" taskname="phpcpd" logoutput="true" level="debug" passthru="true">
            <arg path="${basedir}/src" />
        </exec>

        <property name="phpcpd.done" value="true"/>
    </target>

    <target name="phpcpd-ci"
            unless="phpcpd.done"
            depends="prepare"
            description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcpd}" taskname="phpcpd" logoutput="true" level="debug" passthru="true">
            <arg value="--log-pmd" />
            <arg path="${basedir}/build/logs/pmd-cpd.xml" />
            <arg path="${basedir}/src" />
        </exec>

        <property name="phpcpd.done" value="true"/>
    </target>

    <target name="phpunit"
            unless="phpunit.done"
            depends="prepare"
            description="Run unit tests with PHPUnit">
        <exec executable="${phpunit}" returnProperty="result.phpunit" taskname="phpunit" logoutput="true" level="debug" passthru="true">
            <arg value="--configuration"/>
            <arg path="${basedir}/phpunit.xml.dist"/>
            <arg value="--debug"/>
        </exec>

        <property name="phpunit.done" value="true"/>
    </target>

    <target name="phpunit-no-coverage"
            unless="phpunit.done"
            depends="prepare"
            description="Run unit tests with PHPUnit (without generating code coverage reports)">
        <exec executable="${phpunit}" returnProperty="result.phpunit" taskname="phpunit" logoutput="true" level="debug" passthru="true">
            <arg value="--configuration"/>
            <arg path="${basedir}/phpunit.xml.dist"/>
            <arg value="--no-coverage"/>
            <arg value="--debug"/>
        </exec>

        <property name="phpunit.done" value="true"/>
    </target>

    <target name="phpdox"
            unless="phpdox.done"
            depends="phploc-ci,phpcs-ci,phpmd-ci"
            description="Generate project documentation using phpDox">
        <exec executable="${phpdox}" dir="${basedir}/build" taskname="phpdox" logoutput="true" level="debug" />

        <property name="phpdox.done" value="true"/>
    </target>

    <target name="-check-failure">
        <fail message="PHPUnit did not finish successfully">
            <condition>
                <not>
                    <equals arg1="${result.phpunit}" arg2="0"/>
                </not>
            </condition>
        </fail>
    </target>

</project>
